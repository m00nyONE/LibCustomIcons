{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"#types","title":"Types","text":"<ul> <li>class LibCustomIcons</li> </ul>"},{"location":"types/LibCustomIcons/","title":"class LibCustomIcons","text":""},{"location":"types/LibCustomIcons/#methods","title":"methods","text":""},{"location":"types/LibCustomIcons/#libcustomiconsgetcurrentfolder","title":"LibCustomIcons.GetCurrentFolder","text":"<pre><code>function LibCustomIcons.GetCurrentFolder() -&gt; folder string\n</code></pre> <p>@return <code>folder</code> - The current folder name</p> <p>Retrieves the current folder where the icons are stored.</p>"},{"location":"types/LibCustomIcons/#libcustomiconshasstatic","title":"LibCustomIcons.HasStatic","text":"<pre><code>function LibCustomIcons.HasStatic(username: string) -&gt; hasStaticIcon boolean\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>hasStaticIcon</code> - <code>true</code> if a custom static icons exists, <code>false</code> otherwise.</p> <p>Checks whether a static icon exists for the given username.</p>"},{"location":"types/LibCustomIcons/#libcustomiconshasanimated","title":"LibCustomIcons.HasAnimated","text":"<pre><code>function LibCustomIcons.HasAnimated(username: string) -&gt; hasAnimatedIcon boolean\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>hasAnimatedIcon</code> - <code>true</code> if a custom animated icons exists, <code>false</code> otherwise.</p> <p>Checks whether an animated icon exists for the given username.</p>"},{"location":"types/LibCustomIcons/#libcustomiconshasicon","title":"LibCustomIcons.HasIcon","text":"<pre><code>function LibCustomIcons.HasIcon(username: string) -&gt; hasStaticIcon boolean\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>hasStaticIcon</code> - <code>true</code> if a custom static icons exists, <code>false</code> otherwise.</p> <p>Checks if a custom icon (either static or animated) exists for the given username.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgetstatic","title":"LibCustomIcons.GetStatic","text":"<pre><code>function LibCustomIcons.GetStatic(username: string) -&gt; texturePath string?\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>texturePath</code> - or <code>nil</code> if no static icon exists</p> <p>Retrieves the texturePath of the static icon for the user or nil if none exists.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgetanimated","title":"LibCustomIcons.GetAnimated","text":"<pre><code>function LibCustomIcons.GetAnimated(username: string) -&gt; animation table\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>animation</code> - <code>{texturePath, width, height, fps}</code> or <code>nil</code> if no animated icon exists</p> <p>Retrieves the texturePath and animation parameters of the animated icon for the user or nil if none exists.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgeticon","title":"LibCustomIcons.GetIcon","text":"<pre><code>function LibCustomIcons.GetIcon(username: string) -&gt; animation (table|string)\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>animation</code> - <code>{texturePath, width, height, fps}</code> or <code>texturePath</code> or <code>nil</code> if no static icon exists</p> <p>Retrieves the texturePath and animation parameters of the animated icon for the user if it exists or the texturePath of the static icon for the user or nil if none exists.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgetallstatic","title":"LibCustomIcons.GetAllStatic","text":"<pre><code>function LibCustomIcons.GetAllStatic() -&gt; staticTable table&lt;string,string&gt;\n</code></pre> <p>@return <code>staticTable</code> - mapping <code>@accountname</code> to <code>texturePath</code> for all static icons</p> <p>Retrieves all registered static icons from the internal table as a deep copy. Editing the returning table has no effect to the internal one that is used to retrieve actual icons.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgetallanimated","title":"LibCustomIcons.GetAllAnimated","text":"<pre><code>function LibCustomIcons.GetAllAnimated() -&gt; animTable table&lt;string,table&gt;\n</code></pre> <p>@return <code>animTable</code> - mapping <code>@accountname</code> to <code>{texturePath, width, height, fps}</code> for all animated icons</p> <p>Retrieves all registered animated icons from the internal table as a deep copy. Editing the returning table has no effect to the internal one that is used to retrieve actual icons.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgetstaticcount","title":"LibCustomIcons.GetStaticCount","text":"<pre><code>function LibCustomIcons.GetStaticCount() -&gt; count number\n</code></pre> <p>@return <code>count</code> - The number of static icons</p> <p>Returns the number of registered static icons. The result is cached after the first computation.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgetanimatedcount","title":"LibCustomIcons.GetAnimatedCount","text":"<pre><code>function LibCustomIcons.GetAnimatedCount() -&gt; count number\n</code></pre> <p>@return <code>count</code> - The number of animated icons</p> <p>Returns the number of registered animated icons. The result is cached after the first computation.</p>"},{"location":"types/LibCustomIcons/#libcustomiconsgeticoncount","title":"LibCustomIcons.GetIconCount","text":"<pre><code>function LibCustomIcons.GetIconCount() -&gt; count number\n</code></pre> <p>@return <code>count</code> - The total number of icons</p> <p>Returns the total number of registered icons (static + animated). The result is cached after the first computation.</p>"},{"location":"types/LibCustomIcons/#fields","title":"fields","text":""},{"location":"types/LibCustomIcons/#libcustomiconsname","title":"LibCustomIcons.name","text":"<pre><code>LibCustomIcons.name: string = \"LibCustomIcons\"\n</code></pre>"},{"location":"types/LibCustomIcons/#libcustomiconsversion","title":"LibCustomIcons.version","text":"<pre><code>LibCustomIcons.version: string = \"dev\"\n</code></pre>"},{"location":"types/LibCustomIcons/#libcustomiconsauthor","title":"LibCustomIcons.author","text":"<pre><code>LibCustomIcons.author: string = \"@m00nyONE\"\n</code></pre>"}]}